package content;
import java.util.Arrays;
import java.util.List;

public class NarrativeContent {

	//Location based story creation. 
	public List<String> dungeonGoals = Arrays.asList("Stop the dungeon's monstrous inhabitants from raiding the surface world.","Foil a villain's evil scheme. "
			,"Destroy a magical threat inside the dungeon.","Acquire treasure. ", "Find a particular item for a specific purpose. ", "Retrieve a stolen item hidden in the dungeon. ","Find information needed for a special purpose. "
			,"Rescue a captive.","Discover the fate of a previous adventuring party","Find an N PC who disappeared in the area. ", "Slay a dragon or some other challenging monster. ", "Discover the nature and origin of a strange location or phenomenon. ",
			"Pursue fleeing foes taking refuge in the dungeon.","Escape from captivity in the dungeon. ", "Clear a ruin so it can be rebuilt and reoccupied. ", "Discover why a villain is interested in the dungeon.", "Win a bet or complete a rite of passage by surviving in the dungeon for a certain amount oftime. ","Parley with a villain in the dungeon. "
			,"Hide from a threat outside the dungeon. ");
	public List<String> settlementGoals = Arrays.asList("Locate a dungeon or other site of interest. ", "Infiltrate local gang. ", "Assess the scope of a natural or unnatural disaster. ", "Escort an NPC to a destination. ", "Arrive at a destination without being seen by the villain's forces. ", "Stop monsters from raiding caravans and farms. ",
			"Establish trade with a distant town. ", "Protect a caravan traveling through/from town. ", "Map a new land near the settlement. ", "Find a place to establish a colony. ",  "Find a natural resource. ", "Hunt a specific monster. ", "Return home from a distant place. ", "Obtain information from a reclusive hermit. ", "Find an object that was lost in the settlement. ", "Discover the fate of a missing group of merchants/explorers. ","Pursue fleeing foes. ", "Prepare to defend against an approaching army. ", "Escape the reign of a tyrant. ", "Protect a wilderness site from settlement expansion. ", "Solve the mystery of missing children in the settlement", "Discover the source of a fire that caused significant damage to settlement." );
	public List<String> otherGoals = Arrays.asList("Seize control of a fortified location such as a fortress, town, or ship. ","Defend a location from attackers. ", "Retrieve an object from inside a secure location in a settlement. ", "Retrieve an object from a caravan. ", "Salvage an object or goods from a lost vessel or caravan. ", "Break a prisoner out of a jail or prison camp. ", "Escape from a jail or prison camp. ", "Successfully travel through an obstacle course to gain recognition or reward. ", "Infiltrate a fortified location. ","Find the source of strange occurrences in a haunted house or other location. ", "Interfere with the operation of a business.", "Rescue a character, monster, or object from a natural or unnatural disaster. ");
	public List<String> adventureIntro = Arrays.asList("While traveling in the wilderness, the characters fall into a sinkhole that opens beneath their feet, dropping them into the adventure location", "While traveling in the wilderness, the characters notice the entrance to the adventure location.","While traveling on a road, the characters are attacked by monsters that flee into the nearby adventure location. ", "The adventurers find a map on a dead body. In addition to the map setting up the adventure, the adventure's villain wants the map. "
			,"A mysterious magic item or a cruel villain teleports the characters to the adventure location. ", "A stranger approaches the characters in a tavern and urges them toward the adventure location. ", "A town or village needs volunteers to go to the adventure location. ", "An NPC the characters care about needs them to go to the adventure location. ", "An NPC the characters respect asks them to go to the adventure location. ", "One night, the characters all dream about entering the adventure location. ", "A ghost appears and terrorizes a village. Research reveals that it can be put to rest only by entering the adventure location.");
	public List<String> adventureClimax = Arrays.asList("The a\"dventurers confront the main villain and a group of minions in a bloody battle to the finish. ", "The adventurers chase the villain while dodging obstacles designed to thwart them, leading to a final confrontation in or outside the villain's refuge. ", "The actions of the adventurers or the villain result in a cataclysmic event that the adventurers must escape.", "The adventurers race to the site where the villain is bringing a master plan to its conclusion, arriving just as that plan is about to be completed. ", "The villain and two or three lieutenants perform separate rites in a large room. The adventurers must disrupt all the rites at the same time. ",
			"An ally betrays the adventurers as they're about to achieve their goal. (Use this climax carefully, and don't overuse it.)", "A portal opens to another plane of existence. Creatures on the other side spill out, forcing the adventurers to close the portal and deal with the villain at the same time. ", "Traps, hazards, or animated objects turn against the adventurers while the main villain attacks. ", "The dungeon begins to collapse while the adventurers face the main villain, who attempts to escape in the chaos. ","A threat more powerful than the adventurers appears, destroys the main villain, and then turns its attention on the characters. ", "The adventurers must choose whether to pursue the fleeing main villain or save an N PC they care about or a group of innocents. ", "The adventurers must discover the main villain's secret weakness before they can hope to defeat that villain." );
	
	//Event based story creation.
	public List<String> eventBasedVillainActions = Arrays.asList("Big event", "Crime spree", "Growing corruption", "One and done", "Serial crimes", "Step by step");
	public List<String> eventBasedGoals = Arrays.asList("Bring the villain to justice.", "Clear the name of an innocent NPC.", "Protect or hide an NPC.","Protect an object.", "Discover the nature and origin of a strange phenomenon that might be the villain's doing.","Find a wanted fugitive.", "Overthrow a tyrant.", "Uncover a conspiracy to overthrow a ruler.", "Negotiate peace between enemy nations, factions or feuding families.", "Secure aid from a ruler or council.", "Help a villain find redemption.","Parley with a villain.", "Smuggle weapons to rebel forces.", "Stop a band of smugglers.", "Gather intelligence on an enemy force.","Win a tournament.", "Determine the villain 's identity.", "Locate a stolen item.", "Make sure a wedding goes off without a hitch.");
	public List<String> framingEvents = Arrays.asList("Anniversary of a monarch's reign", "Anniversary of an important event", "Arena Event","Arrival of a caravan or ship","Arrival of a circus", "Arrival of an important NPC ", " Arrival of marching modrons ", " Artistic performance ", " Athletic event ", " Birth of a child", "Birthday of an important NPC ", " Civic festival Comet appearance", "£Commemoration of a past tragedy", "Consecration of a new temple Coronation", "Council meeting", "Equinox or solstice", "Execution\r\n" + 
			"FertiIity festivaI", " Full moon Funeral", " Graduation of cadets or wizards", " Harvest festival", " Holy day", " Investiture of a knight or other noble", " Lunar eclipse", " Midsummer festival", " Midwinter festival", " Migration of monsters", " Monarch's ball", " New moon", "New year", " Pardoning of a prisoner", "Planar conjunction", " Planetary alignment", " Priestly investiture", " Procession of ghosts", " Remembrance for soldiers lost in war", " Royal address or proclamation", " Royal audience day", " Signing of a treaty", " Solar eclipse", " Tournament Trial Violent uprising", " Wedding or wedding anniversary", " Concurrence of two important events");
	public List<String> moralQuandries = Arrays.asList("Ally quandary", "Friend quandary", "Honor quandary", "Rescue quandary", "Respect quandary" );
	public List<String> twists = Arrays.asList("The adventurers are racing against other creatures with the same or opposite goal.", "The adventurers become responsible for the safety of a noncombatant NPC.","The adventurers are prohibited from killing the villain, but the villain has no compunctions about killing them", "The adventurers have a time limit.", "The adventurers have received false or extraneous information.", "Completing an adventure goal fulfills a prophecy or prevents the fulfillment of a prophecy.", "The adventurers have two different goals, but they can complete only one.","Completing the goal secretly helps the villain.", "The adventurers must cooperate with a known enemy to achieve the goal", "The adventurers are under magical compulsion (such as a geas spell) to complete the ir goal");
	public List<String> sideQuests = Arrays.asList("Find a specific item rumored to be in the area.", "Retrieve a stolen item in the vil lain's possession.","Receive information from an NPC in the area.", "Rescue a captive." , "Discover the fate of a missing NPC.", "Slay a specific monster.", "Discover the nature and origin of a strange phenomenon in the area.", "Secure the aid of a character or creature in the area." );
	public List<String> characterObjectives = Arrays.asList("Make Peace. The characters must convince two opposing groups (or their leaders) to end the conflict that embroils them. As a complication, the characters might have enemies on one or both of the opposing sides, or some other group or individual might be instigating the conflict to further its own ends.",
			"Protect an NPC or Object. The characters must act as bodyguards or protect some object in their custody. As a complication, the NPC under the party's protection might be cursed, diseased, prone to panic attacks, too young or too old to fight, or apt to risk the lives of the adventurers through dubious decisions. The object the adventurers have sworn to protect might be sentient, cursed, or difficult to transport.", 
			"Retrieve an Object. The adventurers must gain possession of a specific object in the area of the encounter, preferably before combat finishes. As a complication, enemies might desire the object as much as the adventurers do, forcing both parties to fight for it.",
			"Run a Gauntlet. The adventurers must pass through a dangerous area. This objective is similar to retrieving an object insofar as reaching the exit is a higher priority than killing opponents in the area. A time limit adds a complication, as does a decision point that might lead characters astray. Other complications include traps, hazards, and monsters.",
			"Sneak In. The adventurers need to move through the encounter area without making their enemies aware of their presence. Complications might ensue if they are detected.",
			"Stop a Ritual. The plots of evil cult leaders, malevolent warlocks, and powerful fiends often involve rituals that must be foiled. Characters engaged in stopping a ritual must typically fight their way through evil minions before attempting to disrupt the ritual's powerful magic. As a complication, the ritual might be close to completion when the characters arrive, imposing a time limit. Depending on the ritual, its completion might have immediate consequences as welL",
			"Take Out a Single Target. The villain is surrounded by minions powerful enough to kill the adventurers. The characters can flee and hope to confront the villain another day, or they can try to fight their way through the minions to take out their target. As a complication, the minions might be innocent creatures under the villain's controL Killing the villain means breaking that control, but the adventurers must endure the minions' attacks until they do.");
	public List<String> secretPassages = Arrays.asList("Portal", "Magical Mirror", "Hidden behind bookcase", "Trick door", "Passage under floor", "Object that allows transportation of 1 Character", "Object that allows repeated transportation" );
}
